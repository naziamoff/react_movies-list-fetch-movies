{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","getMovie","movieTitle","a","fetch","response","json","FindMovie","moviesList","onMovieAdd","useState","setMovieTitle","isMovieFound","setIsMovieFound","foundMovie","setFoundMovie","useEffect","fetchMovie","Response","htmlFor","type","id","placeholder","classNames","value","onChange","target","onClick","disabled","includes","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"uTAOaA,EAA6B,SAACC,GACzC,IAAQC,EAAUD,EAAVC,MAER,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAa,UAAQ,aAApC,SAEE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAG,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAOG,OACZC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,cAAlC,gBAAiDD,QAAjD,IAAiDA,OAAjD,EAAiDA,EAAOK,aAI5D,sBAAKJ,UAAU,UAAU,UAAQ,UAAjC,iBACGD,QADH,IACGA,OADH,EACGA,EAAOM,KACR,iCC9BGC,EAA8B,SAACR,GAC1C,IAAQS,EAAWT,EAAXS,OAER,OACE,qBAAKP,UAAU,SAAf,SACGO,EAAOC,KAAI,SAAAT,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMU,c,+CCbRC,G,MAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACCC,MAAM,GAAD,OAHlB,+CAGkB,OAAUF,IADhB,cAChBG,EADgB,yBAGfA,EAASC,QAHM,2CAAH,uDCWRC,EAA6B,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACvD,EAAoCC,mBAAS,IAA7C,mBAAOR,EAAP,KAAmBS,EAAnB,KACA,EAAwCD,mBAAyB,MAAjE,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,mBAAuB,MAA3D,mBAAOI,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRH,EAAgB,QACf,CAACX,IAEJ,IAAMe,EAAU,uCAAG,4BAAAd,EAAA,sEACGF,EAASC,GADZ,OAGM,UAFjBZ,EADW,QAGP4B,UACRL,GAAgB,GAChBE,EAAczB,KAEduB,GAAgB,GAChBE,EAAc,OARC,2CAAH,qDAyBhB,OACE,qCACE,uBAAMxB,UAAU,aAAhB,UACE,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ4B,QAAQ,cAAjC,yBAIA,qBAAK5B,UAAU,UAAf,SACE,uBACE6B,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZ/B,UAAWgC,IAAW,QAAS,CAC7B,aAA8B,IAAjBX,EACb,aAAcA,IAEhBY,MAAOtB,EACPuB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBf,EAAce,EAAOF,aAGjC,IAAjBZ,GACC,mBAAGrB,UAAU,iBAAb,qDAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,OACR7B,UAAU,kBACVoC,QAAS,kBAAMV,KAJjB,4BAUF,qBAAK1B,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,MACRQ,UAAWhB,EACXrB,UAAU,oBACVoC,QAAS,WA1Ddb,IAAcN,EAAWqB,SAASf,KAIvCL,EAAW,GAAD,mBACLD,GADK,CAERM,KAGFH,EAAc,MA4CN,qCAaN,sBAAKpB,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,qBACCqB,GAAgB,cAAC,EAAD,CAAWtB,MAAOwB,WClG9BgB,EAAgB,WAC3B,MAA4BpB,mBAAkB,IAA9C,mBAAOZ,EAAP,KAAeiC,EAAf,KAEA,OACE,sBAAKxC,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYO,OAAQA,MAEtB,qBAAKP,UAAU,UAAf,SACE,cAAC,EAAD,CAAWiB,WAAYV,EAAQW,WAAYsB,UCVnDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.15e3b60e.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\" data-cy=\"card-image\">\n\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie?.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movie-title\">{movie?.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"content\">\n          {movie?.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const api = 'https://www.omdbapi.com/?apikey=d76b35cd&t=';\n\nexport const getMovie = async (movieTitle: string) => {\n  const response = await fetch(`${api}${movieTitle}`);\n\n  return response.json();\n};\n","import React, {\n  Dispatch, SetStateAction, useEffect, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  moviesList: Movie[],\n  onMovieAdd: Dispatch<SetStateAction<Movie[]>>\n};\n\nexport const FindMovie: React.FC<Props> = ({ moviesList, onMovieAdd }) => {\n  const [movieTitle, setMovieTitle] = useState('');\n  const [isMovieFound, setIsMovieFound] = useState<null | boolean>(null);\n  const [foundMovie, setFoundMovie] = useState<null | Movie>(null);\n\n  useEffect(() => {\n    setIsMovieFound(null);\n  }, [movieTitle]);\n\n  const fetchMovie = async () => {\n    const movie = await getMovie(movieTitle);\n\n    if (movie.Response === 'True') {\n      setIsMovieFound(true);\n      setFoundMovie(movie);\n    } else {\n      setIsMovieFound(false);\n      setFoundMovie(null);\n    }\n  };\n\n  const addMovie = () => {\n    if (!foundMovie || moviesList.includes(foundMovie)) {\n      return;\n    }\n\n    onMovieAdd([\n      ...moviesList,\n      foundMovie,\n    ]);\n\n    setMovieTitle('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': isMovieFound === false,\n                'is-success': isMovieFound,\n              })}\n              value={movieTitle}\n              onChange={({ target }) => setMovieTitle(target.value)}\n            />\n          </div>\n          {isMovieFound === false && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              data-cy=\"find\"\n              className=\"button is-light\"\n              onClick={() => fetchMovie()}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              data-cy=\"add\"\n              disabled={!isMovieFound}\n              className=\"button is-primary\"\n              onClick={() => addMovie()}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {isMovieFound && <MovieCard movie={foundMovie} />}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie moviesList={movies} onMovieAdd={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}